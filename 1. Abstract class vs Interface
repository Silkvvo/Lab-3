// Interface

public interface Shape {
    double calculateArea();
    void display();
}
public class Circle implements Shape {
    private double radius;
    @Override
    public double calculateArea() {
        return Math.PI * radius * radius;
    }
    @Override
    public void display() {
        System.out.println("This is a circle.");
    }
}
public class Rectangle implements Shape {
    private double length;
    private double width;
    @Override
    public double calculateArea() {
        return length * width;
    }
    @Override
    public void display() {
        System.out.println("This is a rectangle.");
    }
}

// Abstract Class

public abstract class Shape {
    protected String name;
    public Shape(String name) {
        this.name = name;
    }
    public abstract double calculateArea();
    public abstract void display();
}
public class Circle extends Shape {
    private double radius;
    public Circle(String name, double radius) {
        super(name);
        this.radius = radius;
    }
    @Override
    public double calculateArea() {
        return Math.PI * radius * radius;
    }
    @Override
    public void display() {
        System.out.println("This is a circle named " + name);
    }
}
public class Rectangle extends Shape {
    private double length;
    private double width;
    public Rectangle(String name, double length, double width) {
        super(name);
        this.length = length;
        this.width = width;
    }
    @Override
    public double calculateArea() {
        return length * width;
    }
    @Override
    public void display() {
        System.out.println("This is a rectangle named " + name);
    }
}


